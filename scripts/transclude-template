#!/usr/bin/env python3
#
# transclude-template: preprocessor for XML interface definitions to
# interpret #include statements to include nested XML fragments and
# snippets in documents.
#
# Copyright (C) 2022 VyOS maintainers and contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or later as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

import os
import re
import shlex
import sys

regexp = re.compile(r'^ *#include <([^>]+)>((?: [a-zA-Z_]+=.+)*)$')
value_regexp = re.compile(r'>({([a-zA-Z_]+)(?:\|([^}]+))?})<') # search for {key} or {key:default} inside tags

def parse_values(values):
    out = {}
    if values:
        pairs = shlex.split(values.lstrip())
        for pair in pairs:
            key, value = pair.split("=", 1)
            out[key] = value
    return out

def parse_file(filename, values=None):
    lines = ""
    value_dict = parse_values(values)
    with open(filename, 'r') as f:
        while True:
            line = f.readline()
            if line:
                result = regexp.match(line)
                if result:
                    lines += parse_file(os.path.join(directory, result.group(1)), result.group(2))
                else:
                    for value_find in value_regexp.findall(line):
                        full_match, key, default_value = value_find
                        line = line.replace(full_match, value_dict[key] if key in value_dict else default_value)
                    lines += line
            else:
                return lines

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('Must specify XML file!', file=sys.stderr)
        sys.exit(1)
    filename = sys.argv[1]
    directory = os.path.dirname(os.path.abspath(filename))
    print(parse_file(filename))

