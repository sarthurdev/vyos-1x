# Copyright 2020-2022 VyOS maintainers and contributors <maintainers@vyos.io>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.  If not, see <http://www.gnu.org/licenses/>.

import os
import re

from vyos import ConfigError

def format_task(minute="*", hour="*", day="*", dayofweek="*", month="*", user="root", rawspec=None, command=""):
    fmt_full = "{minute} {hour} {day} {month} {dayofweek} {user} {command}\n"
    fmt_raw = "{spec} {user} {command}\n"

    if rawspec is None:
        s = fmt_full.format(minute=minute, hour=hour, day=day,
                            dayofweek=dayofweek, month=month, command=command, user=user)
    else:
        s = fmt_raw.format(spec=rawspec, user=user, command=command)

    return s

def split_interval(s):
    result = re.search(r"(\d+)([mdh]?)", s)
    value = int(result.group(1))
    suffix = result.group(2)
    return( (value, suffix) )

def make_command(executable, arguments):
    if arguments:
        return("sg vyattacfg \"{0} {1}\"".format(executable, arguments))
    else:
        return("sg vyattacfg \"{0}\"".format(executable))

def task_scheduler_verify(tasks):
    for task in tasks:
        if not task["interval"] and not task["spec"]:
            raise ConfigError("Invalid task {0}: must define either interval or crontab-spec".format(task["name"]))

        if task["interval"]:
            if task["spec"]:
                raise ConfigError("Invalid task {0}: cannot use interval and crontab-spec at the same time".format(task["name"]))
 
            if not re.match(r"^\d+[mdh]?$", task["interval"]):
                raise(ConfigError("Invalid interval {0} in task {1}: interval should be a number optionally followed by m, h, or d".format(task["name"], task["interval"])))
            else:
                # Check if values are within allowed range
                value, suffix = split_interval(task["interval"])

                if not suffix or suffix == "m":
                    if value > 60:
                        raise ConfigError("Invalid task {0}: interval in minutes must not exceed 60".format(task["name"]))
                elif suffix == "h":
                    if value > 24:
                        raise ConfigError("Invalid task {0}: interval in hours must not exceed 24".format(task["name"]))
                elif suffix == "d":
                    if value > 31:
                        raise ConfigError("Invalid task {0}: interval in days must not exceed 31".format(task["name"]))

        if not task["executable"]:
            raise ConfigError("Invalid task {0}: executable is not defined".format(task["name"]))
        else:
            # Check if executable exists and is executable
            if not (os.path.isfile(task["executable"]) and os.access(task["executable"], os.X_OK)):
                raise ConfigError("Invalid task {0}: file {1} does not exist or is not executable".format(task["name"], task["executable"]))

def task_scheduler_generate(tasks, crontab = None):
    if not crontab:
        raise ConfigError("No crontab file specified.")

    crontab_header = "### Generated by vyos-update-crontab.py ###\n"
    if len(tasks) == 0:
        if os.path.exists(crontab):
            os.remove(crontab)
        else:
            pass
    else:
        crontab_lines = []
        for task in tasks:
            command = make_command(task["executable"], task["args"])
            if task["spec"]:
                line = format_task(command=command, rawspec=task["spec"])
            else:
                value, suffix = split_interval(task["interval"])
                if not suffix or suffix == "m":
                    line = format_task(command=command, minute="*/{0}".format(value))
                elif suffix == "h":
                    line = format_task(command=command, minute="0", hour="*/{0}".format(value))
                elif suffix == "d":
                    line = format_task(command=command, minute="0", hour="0", day="*/{0}".format(value))
            crontab_lines.append(line)

        with open(crontab, 'w') as f:
            f.write(crontab_header)
            f.writelines(crontab_lines)

def task_scheduler_apply(config):
    # No daemon restarts etc. needed for cron
    pass
